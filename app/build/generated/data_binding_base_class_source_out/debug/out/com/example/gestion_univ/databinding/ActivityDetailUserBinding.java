// Generated by view binder compiler. Do not edit!
package com.example.gestion_univ.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gestion_univ.R;
import com.github.clans.fab.FloatingActionButton;
import com.github.clans.fab.FloatingActionMenu;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDetailUserBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView EmailU;

  @NonNull
  public final TextView EmailUser;

  @NonNull
  public final TextView NomU;

  @NonNull
  public final TextView NomUser;

  @NonNull
  public final TextView RoleU;

  @NonNull
  public final TextView RoleUser;

  @NonNull
  public final TextView TelephoneU;

  @NonNull
  public final TextView TelephoneUser;

  @NonNull
  public final FloatingActionButton deleteButton;

  @NonNull
  public final ImageView detailImageU;

  @NonNull
  public final FloatingActionButton editButton;

  @NonNull
  public final FloatingActionMenu fabMenu;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final Switch switchActivateAccount;

  private ActivityDetailUserBinding(@NonNull ScrollView rootView, @NonNull TextView EmailU,
      @NonNull TextView EmailUser, @NonNull TextView NomU, @NonNull TextView NomUser,
      @NonNull TextView RoleU, @NonNull TextView RoleUser, @NonNull TextView TelephoneU,
      @NonNull TextView TelephoneUser, @NonNull FloatingActionButton deleteButton,
      @NonNull ImageView detailImageU, @NonNull FloatingActionButton editButton,
      @NonNull FloatingActionMenu fabMenu, @NonNull ConstraintLayout main,
      @NonNull Switch switchActivateAccount) {
    this.rootView = rootView;
    this.EmailU = EmailU;
    this.EmailUser = EmailUser;
    this.NomU = NomU;
    this.NomUser = NomUser;
    this.RoleU = RoleU;
    this.RoleUser = RoleUser;
    this.TelephoneU = TelephoneU;
    this.TelephoneUser = TelephoneUser;
    this.deleteButton = deleteButton;
    this.detailImageU = detailImageU;
    this.editButton = editButton;
    this.fabMenu = fabMenu;
    this.main = main;
    this.switchActivateAccount = switchActivateAccount;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDetailUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDetailUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_detail_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDetailUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.EmailU;
      TextView EmailU = ViewBindings.findChildViewById(rootView, id);
      if (EmailU == null) {
        break missingId;
      }

      id = R.id.EmailUser;
      TextView EmailUser = ViewBindings.findChildViewById(rootView, id);
      if (EmailUser == null) {
        break missingId;
      }

      id = R.id.NomU;
      TextView NomU = ViewBindings.findChildViewById(rootView, id);
      if (NomU == null) {
        break missingId;
      }

      id = R.id.NomUser;
      TextView NomUser = ViewBindings.findChildViewById(rootView, id);
      if (NomUser == null) {
        break missingId;
      }

      id = R.id.RoleU;
      TextView RoleU = ViewBindings.findChildViewById(rootView, id);
      if (RoleU == null) {
        break missingId;
      }

      id = R.id.RoleUser;
      TextView RoleUser = ViewBindings.findChildViewById(rootView, id);
      if (RoleUser == null) {
        break missingId;
      }

      id = R.id.TelephoneU;
      TextView TelephoneU = ViewBindings.findChildViewById(rootView, id);
      if (TelephoneU == null) {
        break missingId;
      }

      id = R.id.TelephoneUser;
      TextView TelephoneUser = ViewBindings.findChildViewById(rootView, id);
      if (TelephoneUser == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      FloatingActionButton deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.detailImageU;
      ImageView detailImageU = ViewBindings.findChildViewById(rootView, id);
      if (detailImageU == null) {
        break missingId;
      }

      id = R.id.editButton;
      FloatingActionButton editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.fabMenu;
      FloatingActionMenu fabMenu = ViewBindings.findChildViewById(rootView, id);
      if (fabMenu == null) {
        break missingId;
      }

      id = R.id.main;
      ConstraintLayout main = ViewBindings.findChildViewById(rootView, id);
      if (main == null) {
        break missingId;
      }

      id = R.id.switchActivateAccount;
      Switch switchActivateAccount = ViewBindings.findChildViewById(rootView, id);
      if (switchActivateAccount == null) {
        break missingId;
      }

      return new ActivityDetailUserBinding((ScrollView) rootView, EmailU, EmailUser, NomU, NomUser,
          RoleU, RoleUser, TelephoneU, TelephoneUser, deleteButton, detailImageU, editButton,
          fabMenu, main, switchActivateAccount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
